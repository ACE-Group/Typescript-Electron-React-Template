name: Build

on:
  push:
    branches:
      - forge6-certs
      - master
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn
      - name: lint
        run: yarn lint
  bundle:
    needs: lint
    runs-on: ${{ matrix.platform.host }}
    strategy:
      matrix:
        platform:
          - host: windows-latest
            target: win32
          - host: macOS-latest
            target: darwin
          - host: macOS-latest
            target: mas
          - host: ubuntu-latest
            target: linux
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        if: runner.os != 'macOS'
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Bundle app
        uses: electron-forge/bundle-action@main
        with:
          macos-cert-importer: ci/codesign/import-testing-cert-ci.sh
          target-platform: ${{ matrix.platform.target }}
      - name: Save bundled app
        uses: actions/upload-artifact@v1
        with:
          name: bundled-app-${{ matrix.platform.target }}
          path: out
  installers:
    needs: bundle
    runs-on: ${{ matrix.distributable.os }}-latest
    strategy:
      matrix:
        distributable:
          - os: Windows
            platform: win32
            maker: squirrel
          - os: Windows
            platform: win32
            maker: zip
          - os: macOS
            platform: darwin
            maker: dmg
          # - os: macOS
          #   platform: darwin
          #   maker: pkg
          - os: macOS
            platform: darwin
            maker: zip
          - os: macOS
            platform: mas
            maker: dmg
          # - os: macOS
          #   platform: mas
          #   maker: pkg
          - os: macOS
            platform: mas
            maker: zip
          - os: Ubuntu
            platform: linux
            maker: zip
          - os: Ubuntu
            platform: linux
            maker: deb
          - os: Ubuntu
            platform: linux
            maker: flatpak
          - os: Ubuntu
            platform: linux
            maker: rpm
          - os: Ubuntu
            platform: linux
            maker: snap
    steps:
      - uses: actions/checkout@v2
      - name: Load bundled app
        uses: actions/download-artifact@v1
        with:
          name: bundled-app-${{ matrix.distributable.platform }}
          path: out
      - name: Setup Platform dependencies
        run: ci/platform_setup.sh
        env:
          MAKER: ${{ matrix.distributable.maker }}
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        if: matrix.distributable.os != 'macOS'
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Generate distributables
        uses: electron-forge/distributable-action@main
        with:
          target-maker: "@electron-forge/maker-${{ matrix.distributable.maker }}"
          target-platform: ${{ matrix.distributable.platform }}
          windows-cert-filename: ci/codesign.pfx
          windows-cert-importer: ci/setup-windows-certificate.sh
        env:
          DEBUG: "electron-installer-snap:snapcraft"
      - name: Save distributable
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.distributable.maker }} (${{ matrix.distributable.platform }})
          path: out/make